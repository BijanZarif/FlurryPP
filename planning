==== Structure Possibilities ====
Option 1) Element-local  *** Leaning towards this ***
--Each element stores its own solution data in, say, a vector<vector<double>>
--Each element has either a) a set of operator matrices, or b) a set of pointers to shared operator matrices
--The solver would just tell each element to apply its operator; there would be no global matrix-vector operations
--The inters class would operate like in HiFiLES
>>> Pros:
  + Super easy to modify, add & remove elements
  + Easy to parallelize
  + Easy to understand
>>> Cons:
  - Slower - (probably) no possibility of global BLAS calls
  - More memory usage & overhead?

Option 2) Global Arrays
--There would be a global solution array (or one for each ele type, like HiFiLES)
--There would not really be an ele class; just routines to set up operators & transforms for each ele type
----If an eles class were to even store pointers to the global solution arrays, it would be a huge
    memory overhead, so not worth it
--This would allow for (massive?) speedup through the use of BLAS


??? Question - just how much slower is HiFiLES on CPU's when using BLAS vs. for-loops? Food for thought
Test this out: acl-aphrodite, viscous cylinder test case, p=3, FE, 500 iterations,
no plotting whatsoever, and no residual calculation:
ATLAS_BLAS: 6.06 s
NO_BLAS: 7.03 s
---> BLAS provided ~14% reduction in calculation time - less than I expected, hmm...
maybe the global structure still helped, even without (directly) accounting for cache structure.
After all, even without BLAS, the arrays are still stored in contiguous memory.  Hmm...


Matrix Class Modifictions
==Testing (and profiling with callgrind) show that matrix class (as Josh pointed out) is very inefficient
  due to the use of vectors *of vectors*, which leads to inconsistent/nonlinear memory access.
  --Callgrind shows matrix::operator[] as a big hitter!
==Possible solution: Modify matrix class to use single vector<double> for data
  --But then, how to keep *nice* features like matrix slicing?
    --Make vector<double> data  --> vector<double> *data
	  >>Might have to carry around ptr to 'owner' of *data so the pointer can be deleted properly
	--Modify submatrix --> this->data = inMat->data [copy pointer to data - no data copying!]
	--Modify submatrix --> store iStride & jStride, iStart & jStart, etc. to control how data is accessed
	  >>i.e. to get one column, make jStart be that col index; for row, iStart = row index, etc.
	  >>This *SHOULD* cover all of my *niceties* for slicing operations...