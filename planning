==== Future Work ====	  

Mesh refinement / adaptation
--Move all mesh functions to geo class
--Once some sensor implemented, pass to geo to refine cells
--Upon creating new elements, each new cell can link to "parent" cell to interpolate data to its solution points
  --More complicated if using Galerkin projection instead of collocation, but that's for later

Collapsed-edge triangles
--Set eR pointer to NULL for all collapsed edges
--In calcInviscidFlux on faces, if eR==NULL, set Fn to 0 and return

As stated above - need to modify geo class to handle, well, all geo-related operations.  Better to have
a more global approach to many things, rather than having each ele handle it all.
For moving grids, after geo updates node positions & velocities, have each ele grab the new values




??? Question - just how much slower is HiFiLES on CPU's when using BLAS vs. for-loops? Food for thought
Test this out: acl-aphrodite, viscous cylinder test case, p=3, FE, 500 iterations,
no plotting whatsoever, and no residual calculation:
ATLAS_BLAS: 6.06 s
NO_BLAS: 7.03 s
---> BLAS provided ~14% reduction in calculation time - less than I expected, hmm...
maybe the global structure still helped, even without (directly) accounting for cache structure.
After all, even without BLAS, the arrays are still stored in contiguous memory.  Hmm...